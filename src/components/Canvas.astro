<script>
  import * as THREE from "three";
  import { ConvexObjectBreaker } from "three/addons/misc/ConvexObjectBreaker.js";
  import gsap from "gsap";

  class canvas {
    constructor() {
      this.windowWidth = window.innerWidth;
      this.windowHeight = window.innerHeight;

      this.scene = new THREE.Scene();

      this.renderer = new THREE.WebGLRenderer({ alpha: true });
      this.renderer.setSize(this.windowWidth, this.windowHeight);
      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

      this.loadingManager = new THREE.LoadingManager();
      this.textureLoader = new THREE.TextureLoader(this.loadingManager);

      this.img = this.textureLoader.load("/breaking-object/img.jpg");
      this.img.colorSpace = THREE.SRGBColorSpace;

      this.uResolutionX = Math.min(
        this.windowWidth / this.windowHeight / (1920 / 1080),
        1.0
      );
      this.uResolutionY = Math.min(
        this.windowHeight / this.windowWidth / (1080 / 1920),
        1.0
      );

      this.loadingManager.onLoad = () => {
        document.body.appendChild(this.renderer.domElement);

        this.fov = 60;
        this.fovRad = (this.fov / 2) * (Math.PI / 180);
        this.dist = this.windowHeight / 2 / Math.tan(this.fovRad);
        this.camera = new THREE.PerspectiveCamera(
          this.fov,
          this.windowWidth / this.windowHeight,
          1,
          this.dist * 2
        );
        this.camera.position.z = this.dist;

        this.light = new THREE.AmbientLight(0x000000, 1);
        this.scene.add(this.light);

        this.breaker = new ConvexObjectBreaker();
        this.debris;

        this.createObject();

        this.breakingObject();

        this.render();

        this.resize();
      };
    }

    createObject() {
      this.geometry = new THREE.BoxGeometry(
        this.windowWidth,
        this.windowHeight,
        0.01,
        1,
        1,
        1
      );
      this.material = new THREE.MeshBasicMaterial({
        map: this.img,
      });
      this.mesh = new THREE.Mesh(this.geometry, this.material);

      this.renderer.render(this.scene, this.camera);
    }

    breakingObject() {
      this.mesh.userData.velocity = new THREE.Vector3().randomDirection();
      this.mesh.userData.angularVelocity =
        new THREE.Vector3().randomDirection();
      this.mesh.userData.mass = 1;

      this.debris &&
        this.debris.forEach((d) => d.geometry.dispose() & this.scene.remove(d));

      this.debris = this.breaker.subdivideByImpact(
        this.mesh,
        new THREE.Vector3(0.5, 0.5, 0).randomDirection(),
        new THREE.Vector3(0, 0, 1).randomDirection(),
        (Math.random() * 5 + 1) | 0,
        (Math.random() * 5 + 1) | 0
      );
      this.debris.forEach((d) => this.scene.add(d));

      for (let i = 0; i < this.debris.length; i++) {
        let d = this.debris[i];
        this.boxUVUnwrap(d, this.mesh);

        gsap.to(d.rotation, {
          x: 0.01,
          y: 0.01,
          z: 0.01,
          duration: 0.01,
          delay: 1,
          ease: "power1.inOut",
        });
        gsap.to(d.position, {
          y: this.windowHeight * -2,
          duration: gsap.utils.random(0.5, 0.75),
          delay: gsap.utils.random(1.5, 1.75),
          ease: "power1.in",
        });
      }
    }

    boxUVUnwrap(mesh, sourceMesh = mesh) {
      let pa = mesh.geometry.attributes.position.array;
      let na = mesh.geometry.attributes.normal.array;
      let ta = mesh.geometry.attributes.uv
        ? mesh.geometry.attributes.uv.array
        : new Float32Array((pa.length * 2) / 3);
      let n = new THREE.Vector3();
      let p = new THREE.Vector3();
      let sz = new THREE.Vector3();
      if (!sourceMesh.geometry.boundingBox)
        sourceMesh.geometry.computeBoundingBox();
      sourceMesh.geometry.boundingBox.getSize(sz);
      for (let i = 0, ui = 0; i < pa.length; i += 3, ui += 2) {
        p.set(pa[i], pa[i + 1], pa[i + 2]);

        if (sourceMesh !== mesh) sourceMesh.worldToLocal(mesh.localToWorld(p));

        p.sub(sourceMesh.geometry.boundingBox.min);
        p.divide(sz);
        n.set(Math.abs(na[i]), Math.abs(na[i + 1]), Math.abs(na[i + 2]));
        if (n.x >= n.y) {
          if (n.x > n.z) {
            // YZ
            ta[ui] = p.z;
            ta[ui + 1] = p.y;
          } else {
            // XY
            ta[ui] = p.x * this.uResolutionX + (1.0 - this.uResolutionX) * 0.5;
            ta[ui + 1] =
              p.y * this.uResolutionY + (1.0 - this.uResolutionY) * 0.5;
          }
        } else {
          if (n.y > n.z) {
            // XZ
            ta[ui] = p.x;
            ta[ui + 1] = p.z;
          } else {
            // XY
            ta[ui] = p.x;
            ta[ui + 1] = p.y;
          }
        }
      }
      if (!mesh.geometry.attributes.uv)
        mesh.geometry.setAttribute(
          "uv",
          new THREE.Float32BufferAttribute(ta, 2)
        );
      else mesh.geometry.attributes.uv.needsUpdate = true;
    }

    resize() {
      window.addEventListener("resize", () => {
        this.debris.forEach((d) => this.scene.remove(d));
        this.windowWidth = window.innerWidth;
        this.windowHeight = window.innerHeight;
        this.camera.aspect = this.windowWidth / this.windowHeight;
        this.dist = this.windowHeight / 2 / Math.tan(this.fovRad);
        this.camera.updateProjectionMatrix();
        this.camera.position.z = this.dist;
        this.renderer.setSize(this.windowWidth, this.windowHeight);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        this.uResolutionX = Math.min(
          this.windowWidth / this.windowHeight / (1920 / 1080),
          1.0
        );
        this.uResolutionY = Math.min(
          this.windowHeight / this.windowWidth / (1080 / 1920),
          1.0
        );

        this.createObject();

        this.breakingObject();
      });
    }

    render() {
      requestAnimationFrame(() => {
        this.render();
      });

      this.renderer.render(this.scene, this.camera);
    }
  }
  new canvas();
</script>
